// EnemySummoningManagement.cs
//
// エネミーの配置や召喚などの管理を行います。
//

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class EnemySummoningManagement : MonoBehaviour
{
    [SerializeField] private List<EnemyDeployment> enemyDeployment; // エネミーの配置データを格納するリスト
    [SerializeField] private GameObject ClearPanel;
    [SerializeField] private GameObject TitleButton;
    [SerializeField] private TextMeshProUGUI coinText; // 所持金テキスト
    [SerializeField] private TextMeshProUGUI pieceText; // ピースの数テキスト
    [SerializeField] private TextMeshProUGUI deathLateText; // 死亡率テキスト 
    [SerializeField] private Animator ClearAnimator;
    [SerializeField] private Animator PuzzleAnimetor;
    [SerializeField] private PlayrController playerController; // プレイヤーのコントローラー
    [SerializeField] private GoldManager goldManager; // 金額管理を行うスクリプト
    [SerializeField] private DeathCount deathCount; // 死ぬかの判定を行うスクリプト
    private bool waitingForMiddleBoss = false; // 途中でボスが出てくるかどうかのフラグ
    private bool waitingForShop = false; // ショップを開いているかどうかのフラグ
    private AudioSource audioSource; // BGMの再生用オーディオソース
    private float fadeInTime = 2;
    private float fadeOutTime = 0;
    private bool isFateIn = false;

    [SerializeField] private AudioClip OpenPuzzle;
    [SerializeField] private AudioClip puzzleBGM;

    private void Start()
    {
        playerController = FindAnyObjectByType<PlayrController>();
        goldManager = FindAnyObjectByType<GoldManager>();
        deathCount = FindAnyObjectByType<DeathCount>();
        TitleButton.SetActive(false);
        ClearPanel.SetActive(false);
        audioSource = GetComponent<AudioSource>(); // AudioSourceコンポーネントを取得
        StartCoroutine(Enumerator()); // エネミーの配置を開始
    }

    /// <summary>
    /// エネミーの配置を行います。
    /// </summary>
    /// <returns></returns>
    public IEnumerator Enumerator()
    {
        foreach(var deploment in enemyDeployment)
        {
            switch(deploment.GetState1)
            {
                case EnemyDeployment.state.Smallfry: // 雑魚敵の配置
                    for (int i = 0; i < deploment.EnemyCount; i++)
                    {
                        SpawnEnemy(deploment);
                        yield return new WaitForSeconds(deploment.DelayTime);
                    }
                    break;

                case EnemyDeployment.state.middleBoss: // 中ボスの配置
                    GameObject middleBoss = SpawnEnemy(deploment);
                    waitingForMiddleBoss = true; // 中ボスが出てくるフラグを立てる
                    BossHealth health = middleBoss.GetComponent<BossHealth>();
                    health.OnDeath += () => waitingForMiddleBoss = false; // 中ボスが倒されたらフラグを下げる
                    yield return new WaitUntil(() => !waitingForMiddleBoss); // 中ボスが倒されるまで待機
                    break;
                case EnemyDeployment.state.Boss: // ボスの配置
                    GameObject Bosss = Instantiate(deploment.EnemyPrehab, deploment.GenerationPosition, Quaternion.identity);
                    audioSource.clip = deploment.BossBGM; // ボス戦用のBGMを設定
                    audioSource.Play(); // BGMを再生

                    // ボスが倒された時の処理
                    Boss1Bullet BossBullet = Bosss.GetComponent<Boss1Bullet>();
                    BossBullet.Ondeath += () => StartCoroutine(BossDeath());  
                    break;
                case EnemyDeployment.state.DelayTime:
                    yield return new WaitForSeconds(deploment.DelayTime);
                    break;
                case EnemyDeployment.state.Shop:
                    playerController.isShooting = false; // ショップ中は攻撃できないようにする
                    PuzzleSet();
                    var shop = FindAnyObjectByType<ShopOpen>(); // ショップのオブジェクトを取得
                    goldManager.SetGoldCount(playerController.CoinCount); // 所持金を更新
                    shop.ShopOpenAni();
                    waitingForShop = true; // ショップが開いているフラグを立てる
                    shop.OnShop += () => waitingForShop = false; // ショップが閉じられたらフラグを下げる
                    yield return new WaitUntil(() => !waitingForShop); // ショップが閉じられるまで待機
                    PuzzleAnimetor.SetBool("SetInstructions", false);
                    yield return new WaitForSeconds(2f);
                    PuzzleOut();
                    break;
            }
        }
    }

    /// <summary>
    /// エネミーを生成します。
    /// </summary>
    /// <param name="deployment">エネミーを召喚する際の設定</param>
    /// <returns></returns>
    private GameObject SpawnEnemy(EnemyDeployment deployment)
    {
        Vector2 position = deployment.GenerationPosition;
        GameObject enemy = Instantiate(deployment.EnemyPrehab, position, Quaternion.identity);
        EnemyHealth health = enemy.GetComponent<EnemyHealth>();
        if(health != null)
        {
            health.SetHealth(deployment.EnemyHP);
        }

        return enemy;
    }

    /// <summary>
    /// パズルモードに切り替えます。
    /// </summary>
    private void PuzzleSet()
    {
        coinText.gameObject.SetActive(false); // 所持金テキストを非表示
        pieceText.gameObject.SetActive(false); // ピースの数テキストを非表示
        deathLateText.gameObject.SetActive(false); // 死亡率テキストを非表示
        audioSource.PlayOneShot(OpenPuzzle);
        audioSource.clip = puzzleBGM; // パズル用のBGMを設定
        audioSource.Play(); // BGMを再生
        PuzzleAnimetor.SetBool("SetInstructions", true);
    }

    /// <summary>
    /// シューティングモードに切り替えます。
    /// </summary>
    private void PuzzleOut()
    {
        coinText.gameObject.SetActive(true); // 所持金テキストを表示
        pieceText.gameObject.SetActive(true); // ピースの数テキストを表示
        deathLateText.gameObject.SetActive(true); // 死亡率テキストを表示
        coinText.text = $"コイン:<color=#ffd700>{playerController.CoinCount.ToString()}</color>";
        pieceText.text = $"ピース:<color=#ffd700>{playerController.PieceCount.ToString()}</color>";
        deathLateText.text = $"お邪魔:<color=#ff0000>{((int)((float)deathCount.BlockCount / (float)deathCount.PieceCount * 100)).ToString()}%</color>";
    }

    /// <summary>
    /// ボスが倒された時の処理を行います。
    /// </summary>
    private IEnumerator BossDeath()
    {
        FindAnyObjectByType<PlayrController>().Playstate = PlayState.Clear;
        ClearPanel.SetActive(true);
        // BGMをフェードアウト
        while (audioSource.volume > 0)
        {
            audioSource.volume -= 0.05f;
            yield return new WaitForSeconds(0.1f);
        }
        yield return new WaitForSeconds(1f);
        ClearAnimator.SetBool("EndGame", true);
        yield return new WaitForSeconds(1.7f);
        TitleButton.SetActive(true);
    }
}